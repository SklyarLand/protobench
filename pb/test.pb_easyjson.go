// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package pb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD93e20eDecodePtotobenchPb(in *jlexer.Lexer, out *BenchSmall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			out.Action = string(in.String())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD93e20eEncodePtotobenchPb(out *jwriter.Writer, in BenchSmall) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Action != "" {
		const prefix string = ",\"action\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BenchSmall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD93e20eEncodePtotobenchPb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BenchSmall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD93e20eEncodePtotobenchPb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BenchSmall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD93e20eDecodePtotobenchPb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BenchSmall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD93e20eDecodePtotobenchPb(l, v)
}
func easyjsonD93e20eDecodePtotobenchPb1(in *jlexer.Lexer, out *BenchMedium) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int64(in.Int64())
		case "height":
			out.Height = float32(in.Float32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "alive":
			out.Alive = bool(in.Bool())
		case "desc":
			out.Desc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD93e20eEncodePtotobenchPb1(out *jwriter.Writer, in BenchMedium) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Age))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Height))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Weight))
	}
	if in.Alive {
		const prefix string = ",\"alive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Alive))
	}
	if in.Desc != "" {
		const prefix string = ",\"desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Desc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BenchMedium) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD93e20eEncodePtotobenchPb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BenchMedium) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD93e20eEncodePtotobenchPb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BenchMedium) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD93e20eDecodePtotobenchPb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BenchMedium) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD93e20eDecodePtotobenchPb1(l, v)
}
func easyjsonD93e20eDecodePtotobenchPb2(in *jlexer.Lexer, out *BenchLarge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "age":
			out.Age = int64(in.Int64())
		case "height":
			out.Height = float32(in.Float32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "alive":
			out.Alive = bool(in.Bool())
		case "desc":
			out.Desc = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "num":
			out.Num = int64(in.Int64())
		case "flt":
			out.Flt = float32(in.Float32())
		case "dbl":
			out.Dbl = float64(in.Float64())
		case "tru":
			out.Tru = bool(in.Bool())
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD93e20eEncodePtotobenchPb2(out *jwriter.Writer, in BenchLarge) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Age))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Height))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Weight))
	}
	if in.Alive {
		const prefix string = ",\"alive\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Alive))
	}
	if in.Desc != "" {
		const prefix string = ",\"desc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Desc))
	}
	if in.Nickname != "" {
		const prefix string = ",\"nickname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nickname))
	}
	if in.Num != 0 {
		const prefix string = ",\"num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Num))
	}
	if in.Flt != 0 {
		const prefix string = ",\"flt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Flt))
	}
	if in.Dbl != 0 {
		const prefix string = ",\"dbl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Dbl))
	}
	if in.Tru {
		const prefix string = ",\"tru\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Tru))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BenchLarge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD93e20eEncodePtotobenchPb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BenchLarge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD93e20eEncodePtotobenchPb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BenchLarge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD93e20eDecodePtotobenchPb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BenchLarge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD93e20eDecodePtotobenchPb2(l, v)
}
